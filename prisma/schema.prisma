generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String        @id @default(auto()) @map("_id") @db.ObjectId
  email      String        @unique
  firstName  String
  lastName   String
  middleName String?
  password   String
  dob        DateTime?
  country    String?
  image      String?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  role       UserRole      @default(USER)
  status     AccountStatus @default(ACTIVE)

  FileAnalytics  FileAnalytics[]
  OriginalFiles  File[]              @relation("OriginalFiles")
  CopiedFiles    File[]              @relation("CopiedFiles") // newly added
  wallet         Wallet?
  Transactions   WalletTransaction[]
  billingDetails Json?
}

enum AccountStatus {
  PROCESSING
  ACTIVE
  DISABLED
  FAILED
}

enum UserRole {
  USER
  ADMIN
}

model OtpRequest {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  email        String?
  userId       String?  @db.ObjectId // Optional, used when user is known (e.g., password reset)
  otpCode      String
  otpExpiresAt DateTime
  otpType      OtpType  @default(USER_EMAIL_REGISTRATION)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([email, otpType]) // This is for clarity in code; no effect on MongoDB
}

enum OtpType {
  USER_EMAIL_REGISTRATION
  USER_PHONE_REGISTRATION
  PASSWORD_RESET
  TWO_FACTOR_AUTH
  EMAIL_CHANGE
}

model EmailTemplate {
  id              String   @id @map("_id") @db.String
  name            String
  description     String?
  template        String
  subjectTemplate String
  created         DateTime @default(now())
  updated         DateTime @updatedAt
}

model File {
  id                 String          @id @default(auto()) @map("_id") @db.ObjectId
  fileName           String
  description        String?
  fileType           String // e.g., image, video, audio, document
  fileSize           Int // size in bytesmn
  fileExtension      String // e.g., .jpg, .mp4, .pdf
  thumbnailUrl       String?
  storageProvider    String // e.g., AWS, Google Cloud, etc.
  storageKey         String // key or path in the storage service
  referralEarnings   Float           @default(0) // earnings from referrals for this file
  totalViews         Int             @default(0) // total number of views
  uploadedDate       String
  originalUserFileID String?         @db.ObjectId // userId of the original uploader
  currentOwner       String          @db.ObjectId // userId of current owner (if transferred)
  originalOwner      String          @db.ObjectId // userId of original uploader
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  source             FileSource      @default(NO_SOURCE) // source of the file (e.g., web upload, API)
  status             FileStatus      @default(ACTIVE)
  analytics          FileAnalytics[] // daily/monthly analytics
  OriginalFiles      User            @relation("OriginalFiles", fields: [originalOwner], references: [id])
  CopiedFiles        User            @relation("CopiedFiles", fields: [currentOwner], references: [id])
}

enum FileSource {
  NO_SOURCE
  WEB_UPLOAD
  CLONE
}

enum FileStatus {
  PROCESSING
  ACTIVE
  DISABLED
  FAILED
}

model FileAnalytics {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  fileId          String   @db.ObjectId
  userId          String   @db.ObjectId
  date            DateTime @db.Date
  referalEarnings Float    @default(0) // earnings from referrals for this file
  views           Int      @default(0)
  earnings        Float    @default(0) // earnings for this user on this file in this period
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  file            File     @relation(fields: [fileId], references: [id])
  user            User     @relation(fields: [userId], references: [id])

  @@unique([fileId, userId, date])
  @@map("FileAnalytics")
}

model Wallet {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  userId    String       @unique @db.ObjectId
  available Float        @default(0)
  approved  Float        @default(0)
  paid      Float        @default(0)
  pending   Float        @default(0)
  cancelled Float        @default(0)
  status    WalletStatus @default(ACTIVE)
  updatedAt DateTime     @updatedAt
  createdAt DateTime     @default(now())

  user User @relation(fields: [userId], references: [id])
}

enum WalletStatus {
  ACTIVE
  DISABLED
  REMOVED
}

model WalletTransaction {
  id             String            @id @default(auto()) @map("_id") @db.ObjectId
  userId         String            @db.ObjectId
  amount         Float
  type           TransactionType   @default(EARNING)
  status         TransactionStatus @default(PENDING)
  billingDetails Json
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  referenceId    String?
  note           String?
  user           User              @relation(fields: [userId], references: [id])

  @@index([userId])
}

enum TransactionType {
  EARNING
  PAYOUT
  BONUS
  REFERRAL
  ADJUSTMENT
}

enum TransactionStatus {
  PENDING
  APPROVED
  PAID
  CANCELED
}
