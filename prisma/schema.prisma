generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String        @id @default(auto()) @map("_id") @db.ObjectId
  email      String        @unique
  firstName  String
  lastName   String
  middleName String?
  password   String
  dob        DateTime?
  country    String?
  image      String?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  role       UserRole      @default(USER)
  status     AccountStatus @default(ACTIVE)

  FileAnalytics FileAnalytics[]
  Files         File[]
  wallet        Wallet?
  Transactions  WalletTransaction[]
  billingMethods  BillingMethod[]          
}

enum AccountStatus {
  PROCESSING
  ACTIVE
  DISABLED
  FAILED
}

enum UserRole {
  USER
  ADMIN
}

model OtpRequest {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  email        String?
  userId       String?  @db.ObjectId // Optional, used when user is known (e.g., password reset)
  otpCode      String
  otpExpiresAt DateTime
  otpType      OtpType  @default(USER_EMAIL_REGISTRATION)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([email, otpType]) // This is for clarity in code; no effect on MongoDB
}

enum OtpType {
  USER_EMAIL_REGISTRATION
  USER_PHONE_REGISTRATION
  PASSWORD_RESET
  TWO_FACTOR_AUTH
  EMAIL_CHANGE
}

model EmailTemplate {
  id              String   @id @map("_id") @db.String
  name            String
  description     String?
  template        String
  subjectTemplate String
  created         DateTime @default(now())
  updated         DateTime @updatedAt
}

model File {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String?
  fileUrl       String // uploaded file URL or external link
  fileType      String // e.g., image, video, audio, document
  fileSize      Int // size in bytes
  thumbnailUrl  String?
  totalViews    Int             @default(0) // total number of views
  uploadedDate  String
  originalOwner String          @db.ObjectId // userId of original uploader
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  status        FileStatus      @default(ACTIVE)
  analytics     FileAnalytics[] // daily/monthly analytics
  user          User            @relation(fields: [originalOwner], references: [id])
}

enum FileStatus {
  PROCESSING
  ACTIVE
  DISABLED
  FAILED
}

model FileAnalytics {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  fileId    String   @db.ObjectId
  userId    String   @db.ObjectId
  date      DateTime @db.Date
  views     Int      @default(0)
  earnings  Float    @default(0) // earnings for this user on this file in this period
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  file      File     @relation(fields: [fileId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([fileId, userId, date])
  @@map("FileAnalytics")
}

model Wallet {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  total     Float    @default(0)
  paid      Float    @default(0)
  available Float    @default(0)
  pending   Float    @default(0)
  canceled  Float    @default(0)
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])
}

model WalletTransaction {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  userId      String            @db.ObjectId
  amount      Float
  type        TransactionType   @default(EARNING)
  status      TransactionStatus @default(PENDING)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  referenceId String?
  note        String?

  user        User              @relation(fields: [userId], references: [id])

  @@index([userId])
}

enum TransactionType {
  EARNING
  PAYOUT
  BONUS
  REFERRAL
  ADJUSTMENT
}

enum TransactionStatus {
  PENDING
  APPROVED
  PAID
  CANCELED
}

model BillingMethod {
  id           String            @id @default(auto()) @map("_id") @db.ObjectId
  userId       String            @db.ObjectId
  type         BillingType
  status       BillingStatus     @default(PENDING)
  details      Json              // flexible details like UPI ID, bank account, etc.
  verified     Boolean           @default(false)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  user         User              @relation(fields: [userId], references: [id])

  @@index([userId])
}

enum BillingType {
  UPI
  PAYPAL
  BANK_TRANSFER
  STRIPE
  OTHER
}

enum BillingStatus {
  PENDING
  APPROVED
  REJECTED
  DISABLED
}