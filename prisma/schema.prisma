generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  email      String    @unique
  firstName  String
  lastName   String
  middleName String?
  password   String
  dob        DateTime?
  country    String?
  image      String?
  createdAt  DateTime
  updatedAt  DateTime  @updatedAt
  role       UserRole  @default(USER)
}

enum UserRole {
  USER
  ADMIN
}

model OtpRequest {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  email        String?
  userId       String?  @db.ObjectId // Optional, used when user is known (e.g., password reset)
  otpCode      String
  otpExpiresAt DateTime
  otpType      OtpType  @default(USER_EMAIL_REGISTRATION)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([email, otpType]) // This is for clarity in code; no effect on MongoDB
}

enum OtpType {
  USER_EMAIL_REGISTRATION
  USER_PHONE_REGISTRATION
  PASSWORD_RESET
  TWO_FACTOR_AUTH
  EMAIL_CHANGE
}

model EmailTemplate {
  id              String   @id @map("_id") @db.String
  name            String
  description     String?
  template        String
  subjectTemplate String
  created         DateTime @default(now())
  updated         DateTime @updatedAt
}

model Product {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  productCode        String   @unique
  productName        String
  productDescription String?
  categories         String[] @default([]) @db.ObjectId // Array of category ObjectIds (references Category collection)
  imageLink          String?
}

model Category {
  id                  String  @id @default(auto()) @map("_id") @db.ObjectId
  categoryName        String
  categoryDescription String?
  imageLink           String?
}

model Customization {
  id                       String            @id @default(auto()) @map("_id") @db.ObjectId
  productId                String            @db.ObjectId // Reference to the Product
  partId                   String            @db.ObjectId // Reference to the Part
  customizationName        String
  customizationDescription String?
  customizationSelector    String
  customizationType        CustomizationType
  customizationLink        String? // URL for images
  customizationText        String? // Captions or additional text
}

model CustomizationOption {
  id                       String @id @default(auto()) @map("_id") @db.ObjectId
  customizationId          String @db.ObjectId // Reference to Customization
  partId                   String @db.ObjectId // Reference to the Part
  productId                String @db.ObjectId // Reference to the Product
  customizationOptionValue String
  price                    Float
}

enum CustomizationType {
  Predefined
  Link
  Text
}

model Part {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  productId       String  @db.ObjectId // Reference to the Product
  variantId       String? @db.ObjectId
  partName        String
  partDescription String?
  partSelector    String
  defaultColor    String?
  defaultImage    String?
}

model Variant {
  id                 String       @id @default(auto()) @map("_id") @db.ObjectId
  productId          String       @db.ObjectId
  variantCode        String
  variantName        String
  variantDescription String?
  modelLink          String
  price              Float
  imageLink          String?
  imageCoordinates   Coordinates?

  @@unique([productId, variantCode])
}

enum FeedbackQuestionType {
  MVP_GENERAL
}

model FeedbackQuestion {
  id       String               @id @default(auto()) @map("_id") @db.ObjectId
  question String
  type     FeedbackQuestionType @default(MVP_GENERAL)
}

model FeedbackResponse {
  id        String                     @id @default(auto()) @map("_id") @db.ObjectId
  responses FeedbackQuestionResponse[]
  userId    String?                    @db.ObjectId
  email     String?
}

type FeedbackQuestionResponse {
  question   String
  questionId String @db.ObjectId
  response   String
}

model DesignRoomProduct {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  productName     String
  imageLink       String?
  color           String
  additionalNotes String
  measurements    Json
}

type Coordinates {
  x Float
  y Float
  z Float
}
